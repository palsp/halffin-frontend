{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "linkAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "consumerContract",
          "type": "address"
        }
      ],
      "name": "callBackWithRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/Users/palll/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/VRFConsumerBase.sol",
    "10": "contracts/test/VRFCoordinatorMock.sol",
    "2": "/Users/palll/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/VRFRequestIDBase.sol",
    "4": "/Users/palll/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
    "8": "/Users/palll/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/vendor/SafeMathChainlink.sol"
  },
  "ast": {
    "absolutePath": "contracts/test/VRFCoordinatorMock.sol",
    "exportedSymbols": {
      "VRFCoordinatorMock": [
        584
      ]
    },
    "id": 585,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 469,
        "literals": [
          "solidity",
          "0.6",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:10"
      },
      {
        "absolutePath": "/Users/palll/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
        "file": "@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
        "id": 470,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 820,
        "src": "56:73:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/palll/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/VRFConsumerBase.sol",
        "file": "@chainlink/contracts/src/v0.6/VRFConsumerBase.sol",
        "id": 471,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 1247,
        "src": "130:59:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 584,
        "linearizedBaseContracts": [
          584
        ],
        "name": "VRFCoordinatorMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "1b6b6d23",
            "id": 473,
            "mutability": "mutable",
            "name": "LINK",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 584,
            "src": "226:30:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LinkTokenInterface_$819",
              "typeString": "contract LinkTokenInterface"
            },
            "typeName": {
              "contractScope": null,
              "id": 472,
              "name": "LinkTokenInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 819,
              "src": "226:18:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LinkTokenInterface_$819",
                "typeString": "contract LinkTokenInterface"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 481,
            "name": "RandomnessRequest",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 475,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 481,
                  "src": "287:22:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "287:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 477,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "keyHash",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 481,
                  "src": "311:23:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 476,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "311:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 479,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "seed",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 481,
                  "src": "336:20:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 478,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "336:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "286:71:10"
            },
            "src": "263:95:10"
          },
          {
            "body": {
              "id": 492,
              "nodeType": "Block",
              "src": "404:55:10",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 490,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 486,
                      "name": "LINK",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 473,
                      "src": "414:4:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$819",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 488,
                          "name": "linkAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 483,
                          "src": "440:11:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 487,
                        "name": "LinkTokenInterface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 819,
                        "src": "421:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LinkTokenInterface_$819_$",
                          "typeString": "type(contract LinkTokenInterface)"
                        }
                      },
                      "id": 489,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "421:31:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$819",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "src": "414:38:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LinkTokenInterface_$819",
                      "typeString": "contract LinkTokenInterface"
                    }
                  },
                  "id": 491,
                  "nodeType": "ExpressionStatement",
                  "src": "414:38:10"
                }
              ]
            },
            "documentation": null,
            "id": 493,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 483,
                  "mutability": "mutable",
                  "name": "linkAddress",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 493,
                  "src": "376:19:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 482,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "376:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "375:21:10"
            },
            "returnParameters": {
              "id": 485,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "404:0:10"
            },
            "scope": 584,
            "src": "364:95:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 524,
              "nodeType": "Block",
              "src": "575:143:10",
              "statements": [
                {
                  "assignments": [
                    505,
                    507
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 505,
                      "mutability": "mutable",
                      "name": "keyHash",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 524,
                      "src": "586:15:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 504,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "586:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 507,
                      "mutability": "mutable",
                      "name": "seed",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 524,
                      "src": "603:12:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 506,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "603:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 517,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 510,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 499,
                        "src": "630:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "components": [
                          {
                            "argumentTypes": null,
                            "id": 512,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "638:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 511,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "638:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 514,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "647:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 513,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "647:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          }
                        ],
                        "id": 515,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "637:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$",
                          "typeString": "tuple(type(bytes32),type(uint256))"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$",
                          "typeString": "tuple(type(bytes32),type(uint256))"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 508,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "619:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 509,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "619:10:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "619:37:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes32_$_t_uint256_$",
                      "typeString": "tuple(bytes32,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "585:71:10"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 519,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 495,
                        "src": "689:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 520,
                        "name": "keyHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 505,
                        "src": "697:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 521,
                        "name": "seed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 507,
                        "src": "706:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 518,
                      "name": "RandomnessRequest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 481,
                      "src": "671:17:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$__$",
                        "typeString": "function (address,bytes32,uint256)"
                      }
                    },
                    "id": 522,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "671:40:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 523,
                  "nodeType": "EmitStatement",
                  "src": "666:45:10"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "a4c0ed36",
            "id": 525,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 502,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 501,
                  "name": "onlyLINK",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 583,
                  "src": "562:8:10",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "562:8:10"
              }
            ],
            "name": "onTokenTransfer",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 500,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 495,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 525,
                  "src": "490:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 494,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "490:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 497,
                  "mutability": "mutable",
                  "name": "fee",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 525,
                  "src": "506:11:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 496,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "506:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 499,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 525,
                  "src": "519:18:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 498,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "519:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "489:49:10"
            },
            "returnParameters": {
              "id": 503,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "575:0:10"
            },
            "scope": 584,
            "src": "465:253:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 567,
              "nodeType": "Block",
              "src": "858:289:10",
              "statements": [
                {
                  "assignments": [
                    535
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 535,
                      "mutability": "mutable",
                      "name": "v",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 567,
                      "src": "868:17:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VRFConsumerBase_$1246",
                        "typeString": "contract VRFConsumerBase"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 534,
                        "name": "VRFConsumerBase",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1246,
                        "src": "868:15:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_VRFConsumerBase_$1246",
                          "typeString": "contract VRFConsumerBase"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 536,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "868:17:10"
                },
                {
                  "assignments": [
                    538
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 538,
                      "mutability": "mutable",
                      "name": "resp",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 567,
                      "src": "895:17:10",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 537,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "895:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 547,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 541,
                            "name": "v",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 535,
                            "src": "938:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_VRFConsumerBase_$1246",
                              "typeString": "contract VRFConsumerBase"
                            }
                          },
                          "id": 542,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "rawFulfillRandomness",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1245,
                          "src": "938:22:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$_t_uint256_$returns$__$",
                            "typeString": "function (bytes32,uint256) external"
                          }
                        },
                        "id": 543,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "938:31:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 544,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 527,
                        "src": "971:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 545,
                        "name": "randomness",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 529,
                        "src": "982:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 539,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "915:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 540,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "915:22:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "915:78:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "895:98:10"
                },
                {
                  "assignments": [
                    549
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 549,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 567,
                      "src": "1003:9:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 548,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1003:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 551,
                  "initialValue": {
                    "argumentTypes": null,
                    "hexValue": "323036303030",
                    "id": 550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1015:6:10",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_206000_by_1",
                      "typeString": "int_const 206000"
                    },
                    "value": "206000"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1003:18:10"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 553,
                            "name": "gasleft",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -7,
                            "src": "1039:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 554,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1039:9:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 555,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 549,
                          "src": "1052:1:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1039:14:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "6e6f7420656e6f7567682067617320666f7220636f6e73756d6572",
                        "id": 557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1055:29:10",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7",
                          "typeString": "literal_string \"not enough gas for consumer\""
                        },
                        "value": "not enough gas for consumer"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7",
                          "typeString": "literal_string \"not enough gas for consumer\""
                        }
                      ],
                      "id": 552,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1031:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1031:54:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 559,
                  "nodeType": "ExpressionStatement",
                  "src": "1031:54:10"
                },
                {
                  "assignments": [
                    561,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 561,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 567,
                      "src": "1096:12:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 560,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1096:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 566,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 564,
                        "name": "resp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 538,
                        "src": "1135:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 562,
                        "name": "consumerContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 531,
                        "src": "1113:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 563,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1113:21:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1113:27:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1095:45:10"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "cf55fe97",
            "id": 568,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "callBackWithRandomness",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 532,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 527,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 568,
                  "src": "765:17:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 526,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "765:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 529,
                  "mutability": "mutable",
                  "name": "randomness",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 568,
                  "src": "792:18:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 528,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "792:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 531,
                  "mutability": "mutable",
                  "name": "consumerContract",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 568,
                  "src": "820:24:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 530,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "820:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "755:95:10"
            },
            "returnParameters": {
              "id": 533,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "858:0:10"
            },
            "scope": 584,
            "src": "724:423:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 582,
              "nodeType": "Block",
              "src": "1173:87:10",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 577,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 571,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1191:3:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1191:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 575,
                              "name": "LINK",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 473,
                              "src": "1213:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$819",
                                "typeString": "contract LinkTokenInterface"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$819",
                                "typeString": "contract LinkTokenInterface"
                              }
                            ],
                            "id": 574,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1205:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 573,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1205:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1205:13:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1191:27:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d75737420757365204c494e4b20746f6b656e",
                        "id": 578,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1220:21:10",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7",
                          "typeString": "literal_string \"Must use LINK token\""
                        },
                        "value": "Must use LINK token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7",
                          "typeString": "literal_string \"Must use LINK token\""
                        }
                      ],
                      "id": 570,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1183:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1183:59:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 580,
                  "nodeType": "ExpressionStatement",
                  "src": "1183:59:10"
                },
                {
                  "id": 581,
                  "nodeType": "PlaceholderStatement",
                  "src": "1252:1:10"
                }
              ]
            },
            "documentation": null,
            "id": 583,
            "name": "onlyLINK",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 569,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1170:2:10"
            },
            "src": "1153:107:10",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 585,
        "src": "191:1071:10"
      }
    ],
    "src": "32:1231:10"
  },
  "bytecode": "608060405234801561001057600080fd5b506040516104073803806104078339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556103a2806100656000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed361461006a578063cf55fe9714610127575b600080fd5b61004e610159565b604080516001600160a01b039092168252519081900360200190f35b6101256004803603606081101561008057600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156100b057600080fd5b8201836020820111156100c257600080fd5b803590602001918460018302840111640100000000831117156100e457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610168945050505050565b005b6101256004803603606081101561013d57600080fd5b50803590602081013590604001356001600160a01b0316610222565b6000546001600160a01b031681565b6000546001600160a01b031633146101bd576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b6000808280602001905160408110156101d557600080fd5b5080516020909101516040519193509150819083906001600160a01b038816907f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c90600090a45050505050565b604080516024810185905260448082018590528251808303909101815260649091019091526020810180516001600160e01b03166394985ddd60e01b179052600090620324b0805a10156102bd576040805162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000604482015290519081900360640190fd5b6000846001600160a01b0316836040518082805190602001908083835b602083106102f95780518252601f1990920191602091820191016102da565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461035b576040519150601f19603f3d011682016040523d82523d6000602084013e610360565b606091505b5050505050505050505056fea26469706673582212201ebd6e31f284231207b7a2c1205783829be1d47636a60284299754880817f2d864736f6c63430006060033",
  "bytecodeSha1": "a234e721cab3c47e532d8404949512e63f344855",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.6+commit.6c089d02"
  },
  "contractName": "VRFCoordinatorMock",
  "coverageMap": {
    "branches": {
      "1": {},
      "10": {
        "VRFCoordinatorMock.callBackWithRandomness": {
          "2": [
            1039,
            1053,
            true
          ]
        }
      },
      "2": {},
      "4": {},
      "8": {}
    },
    "statements": {
      "1": {},
      "10": {
        "VRFCoordinatorMock.callBackWithRandomness": {
          "1": [
            1031,
            1085
          ]
        },
        "VRFCoordinatorMock.onTokenTransfer": {
          "0": [
            666,
            711
          ]
        }
      },
      "2": {},
      "4": {},
      "8": {}
    }
  },
  "dependencies": [
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/LinkTokenInterface",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/SafeMathChainlink",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/VRFConsumerBase",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/VRFRequestIDBase"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed361461006a578063cf55fe9714610127575b600080fd5b61004e610159565b604080516001600160a01b039092168252519081900360200190f35b6101256004803603606081101561008057600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156100b057600080fd5b8201836020820111156100c257600080fd5b803590602001918460018302840111640100000000831117156100e457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610168945050505050565b005b6101256004803603606081101561013d57600080fd5b50803590602081013590604001356001600160a01b0316610222565b6000546001600160a01b031681565b6000546001600160a01b031633146101bd576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b6000808280602001905160408110156101d557600080fd5b5080516020909101516040519193509150819083906001600160a01b038816907f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c90600090a45050505050565b604080516024810185905260448082018590528251808303909101815260649091019091526020810180516001600160e01b03166394985ddd60e01b179052600090620324b0805a10156102bd576040805162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000604482015290519081900360640190fd5b6000846001600160a01b0316836040518082805190602001908083835b602083106102f95780518252601f1990920191602091820191016102da565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461035b576040519150601f19603f3d011682016040523d82523d6000602084013e610360565b606091505b5050505050505050505056fea26469706673582212201ebd6e31f284231207b7a2c1205783829be1d47636a60284299754880817f2d864736f6c63430006060033",
  "deployedSourceMap": "191:1071:10:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;191:1071:10;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;226:30:10;;;:::i;:::-;;;;-1:-1:-1;;;;;226:30:10;;;;;;;;;;;;;;465:253;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;465:253:10;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;465:253:10;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;465:253:10;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;465:253:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;465:253:10;;-1:-1:-1;465:253:10;;-1:-1:-1;;;;;465:253:10:i;:::-;;724:423;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;724:423:10;;;;;;;;;;;-1:-1:-1;;;;;724:423:10;;:::i;226:30::-;;;-1:-1:-1;;;;;226:30:10;;:::o;465:253::-;1213:4;;-1:-1:-1;;;;;1213:4:10;1191:10;:27;1183:59;;;;;-1:-1:-1;;;1183:59:10;;;;;;;;;;;;-1:-1:-1;;;1183:59:10;;;;;;;;;;;;;;;586:15:::1;603:12:::0;630:5:::1;619:37;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;619:37:10;;::::1;::::0;;::::1;::::0;;671:40;619:37;;-1:-1:-1;619:37:10;-1:-1:-1;619:37:10;;;;-1:-1:-1;;;;;671:40:10;::::1;::::0;::::1;::::0;;;::::1;1252:1;;465:253:::0;;;:::o;724:423::-;915:78;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;915:78:10;;;;;;;;25:18:-1;;61:17;;-1:-1;;;;;182:15;-1:-1;;;179:29;160:49;;868:17:10;;1015:6;;1039:9;:14;;1031:54;;;;;-1:-1:-1;;;1031:54:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;1096:12;1113:16;-1:-1:-1;;;;;1113:21:10;1135:4;1113:27;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1113:27:10;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;-1:-1;;;;;;;;;;724:423:10:o",
  "language": "Solidity",
  "natspec": {
    "methods": {}
  },
  "offset": [
    191,
    1262
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6B6D23 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x6A JUMPI DUP1 PUSH4 0xCF55FE97 EQ PUSH2 0x127 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x159 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x125 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x168 SWAP5 POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x125 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x222 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x40 MLOAD SWAP2 SWAP4 POP SWAP2 POP DUP2 SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH32 0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C SWAP1 PUSH1 0x0 SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x94985DDD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x324B0 DUP1 GAS LT ISZERO PUSH2 0x2BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2F9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x35B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x360 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E 0xBD PUSH15 0x31F284231207B7A2C1205783829BE1 0xD4 PUSH23 0x36A60284299754880817F2D864736F6C63430006060033 ",
  "pcMap": {
    "0": {
      "offset": [
        191,
        1262
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "CALLVALUE",
      "path": "10"
    },
    "6": {
      "op": "DUP1"
    },
    "7": {
      "op": "ISZERO"
    },
    "8": {
      "op": "PUSH2",
      "value": "0x10"
    },
    "11": {
      "op": "JUMPI"
    },
    "12": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "14": {
      "op": "DUP1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "REVERT",
      "path": "10"
    },
    "16": {
      "op": "JUMPDEST"
    },
    "17": {
      "offset": [
        191,
        1262
      ],
      "op": "POP",
      "path": "10"
    },
    "18": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "21": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "LT",
      "path": "10"
    },
    "22": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x41"
    },
    "25": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "26": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "29": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "SHR",
      "path": "10"
    },
    "32": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "DUP1",
      "path": "10"
    },
    "33": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x1B6B6D23"
    },
    "38": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "EQ",
      "path": "10"
    },
    "39": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x46"
    },
    "42": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "43": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "DUP1",
      "path": "10"
    },
    "44": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xA4C0ED36"
    },
    "49": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "EQ",
      "path": "10"
    },
    "50": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6A"
    },
    "53": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "54": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "DUP1",
      "path": "10"
    },
    "55": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xCF55FE97"
    },
    "60": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "EQ",
      "path": "10"
    },
    "61": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x127"
    },
    "64": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "65": {
      "fn": null,
      "offset": [
        191,
        1262
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "66": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "68": {
      "op": "DUP1"
    },
    "69": {
      "first_revert": true,
      "op": "REVERT"
    },
    "70": {
      "offset": [
        226,
        256
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "71": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x4E"
    },
    "74": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x159"
    },
    "77": {
      "fn": null,
      "jump": "i",
      "offset": [
        226,
        256
      ],
      "op": "JUMP",
      "path": "10"
    },
    "78": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "79": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "81": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "DUP1",
      "path": "10"
    },
    "82": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "83": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "85": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "87": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "89": {
      "op": "SHL"
    },
    "90": {
      "op": "SUB"
    },
    "91": {
      "offset": [
        226,
        256
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "92": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "93": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "AND",
      "path": "10"
    },
    "94": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "DUP3",
      "path": "10"
    },
    "95": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "96": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "97": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "98": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "DUP2",
      "path": "10"
    },
    "99": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "100": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "SUB",
      "path": "10"
    },
    "101": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "103": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "ADD",
      "path": "10"
    },
    "104": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "105": {
      "fn": null,
      "offset": [
        226,
        256
      ],
      "op": "RETURN",
      "path": "10"
    },
    "106": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "107": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x125"
    },
    "110": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "112": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP1",
      "path": "10"
    },
    "113": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "114": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SUB",
      "path": "10"
    },
    "115": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "117": {
      "op": "DUP2"
    },
    "118": {
      "op": "LT"
    },
    "119": {
      "op": "ISZERO"
    },
    "120": {
      "op": "PUSH2",
      "value": "0x80"
    },
    "123": {
      "op": "JUMPI"
    },
    "124": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "126": {
      "op": "DUP1"
    },
    "127": {
      "op": "REVERT"
    },
    "128": {
      "op": "JUMPDEST"
    },
    "129": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "131": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "133": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "135": {
      "op": "SHL"
    },
    "136": {
      "op": "SUB"
    },
    "137": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP3",
      "path": "10"
    },
    "138": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "139": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "AND",
      "path": "10"
    },
    "140": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "141": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "143": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP2",
      "path": "10"
    },
    "144": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "145": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "146": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "147": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP2",
      "path": "10"
    },
    "148": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "149": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "150": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "152": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP2",
      "path": "10"
    },
    "153": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "154": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "156": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP3",
      "path": "10"
    },
    "157": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "158": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "159": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "165": {
      "op": "DUP2"
    },
    "166": {
      "op": "GT"
    },
    "167": {
      "op": "ISZERO"
    },
    "168": {
      "op": "PUSH2",
      "value": "0xB0"
    },
    "171": {
      "op": "JUMPI"
    },
    "172": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "174": {
      "op": "DUP1"
    },
    "175": {
      "op": "REVERT"
    },
    "176": {
      "op": "JUMPDEST"
    },
    "177": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP3",
      "path": "10"
    },
    "178": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "179": {
      "op": "DUP4"
    },
    "180": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "182": {
      "op": "DUP3"
    },
    "183": {
      "op": "ADD"
    },
    "184": {
      "op": "GT"
    },
    "185": {
      "op": "ISZERO"
    },
    "186": {
      "op": "PUSH2",
      "value": "0xC2"
    },
    "189": {
      "op": "JUMPI"
    },
    "190": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "192": {
      "op": "DUP1"
    },
    "193": {
      "op": "REVERT"
    },
    "194": {
      "op": "JUMPDEST"
    },
    "195": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP1",
      "path": "10"
    },
    "196": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "197": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "198": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "200": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "201": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "202": {
      "op": "DUP5"
    },
    "203": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "205": {
      "op": "DUP4"
    },
    "206": {
      "op": "MUL"
    },
    "207": {
      "op": "DUP5"
    },
    "208": {
      "op": "ADD"
    },
    "209": {
      "op": "GT"
    },
    "210": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "216": {
      "op": "DUP4"
    },
    "217": {
      "op": "GT"
    },
    "218": {
      "op": "OR"
    },
    "219": {
      "op": "ISZERO"
    },
    "220": {
      "op": "PUSH2",
      "value": "0xE4"
    },
    "223": {
      "op": "JUMPI"
    },
    "224": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "226": {
      "op": "DUP1"
    },
    "227": {
      "op": "REVERT"
    },
    "228": {
      "op": "JUMPDEST"
    },
    "229": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "230": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "231": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP1",
      "path": "10"
    },
    "232": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP1",
      "path": "10"
    },
    "233": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "235": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "236": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "238": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP1",
      "path": "10"
    },
    "239": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "240": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DIV",
      "path": "10"
    },
    "241": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "MUL",
      "path": "10"
    },
    "242": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "244": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "245": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "247": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "248": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "249": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP2",
      "path": "10"
    },
    "250": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "251": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "253": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "254": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP1",
      "path": "10"
    },
    "255": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "256": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "257": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "258": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "259": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP2",
      "path": "10"
    },
    "260": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP2",
      "path": "10"
    },
    "261": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "262": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "264": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "ADD",
      "path": "10"
    },
    "265": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP4",
      "path": "10"
    },
    "266": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "DUP4",
      "path": "10"
    },
    "267": {
      "op": "DUP1"
    },
    "268": {
      "op": "DUP3"
    },
    "269": {
      "op": "DUP5"
    },
    "270": {
      "op": "CALLDATACOPY"
    },
    "271": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "273": {
      "op": "SWAP3"
    },
    "274": {
      "op": "ADD"
    },
    "275": {
      "op": "SWAP2"
    },
    "276": {
      "op": "SWAP1"
    },
    "277": {
      "op": "SWAP2"
    },
    "278": {
      "op": "MSTORE"
    },
    "279": {
      "op": "POP"
    },
    "280": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "281": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "282": {
      "op": "POP"
    },
    "283": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x168"
    },
    "286": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "287": {
      "op": "POP"
    },
    "288": {
      "op": "POP"
    },
    "289": {
      "op": "POP"
    },
    "290": {
      "op": "POP"
    },
    "291": {
      "op": "POP"
    },
    "292": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "jump": "i",
      "offset": [
        465,
        718
      ],
      "op": "JUMP",
      "path": "10"
    },
    "293": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "294": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "STOP",
      "path": "10"
    },
    "295": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "296": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x125"
    },
    "299": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "301": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "DUP1",
      "path": "10"
    },
    "302": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "303": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "SUB",
      "path": "10"
    },
    "304": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "306": {
      "op": "DUP2"
    },
    "307": {
      "op": "LT"
    },
    "308": {
      "op": "ISZERO"
    },
    "309": {
      "op": "PUSH2",
      "value": "0x13D"
    },
    "312": {
      "op": "JUMPI"
    },
    "313": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "315": {
      "op": "DUP1"
    },
    "316": {
      "op": "REVERT"
    },
    "317": {
      "op": "JUMPDEST"
    },
    "318": {
      "op": "POP"
    },
    "319": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "DUP1",
      "path": "10"
    },
    "320": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "321": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "322": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "324": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "DUP2",
      "path": "10"
    },
    "325": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "ADD",
      "path": "10"
    },
    "326": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "327": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "328": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "330": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "ADD",
      "path": "10"
    },
    "331": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "332": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "336": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "338": {
      "op": "SHL"
    },
    "339": {
      "op": "SUB"
    },
    "340": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "AND",
      "path": "10"
    },
    "341": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x222"
    },
    "344": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "jump": "i",
      "offset": [
        724,
        1147
      ],
      "op": "JUMP",
      "path": "10"
    },
    "345": {
      "offset": [
        226,
        256
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "346": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        226,
        256
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "348": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        226,
        256
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "349": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "351": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "353": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "355": {
      "op": "SHL"
    },
    "356": {
      "op": "SUB"
    },
    "357": {
      "offset": [
        226,
        256
      ],
      "op": "AND",
      "path": "10"
    },
    "358": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        226,
        256
      ],
      "op": "DUP2",
      "path": "10"
    },
    "359": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "jump": "o",
      "offset": [
        226,
        256
      ],
      "op": "JUMP",
      "path": "10"
    },
    "360": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "361": {
      "offset": [
        1213,
        1217
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "363": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1213,
        1217
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "364": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "368": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "370": {
      "op": "SHL"
    },
    "371": {
      "op": "SUB"
    },
    "372": {
      "offset": [
        1213,
        1217
      ],
      "op": "AND",
      "path": "10"
    },
    "373": {
      "offset": [
        1191,
        1201
      ],
      "op": "CALLER",
      "path": "10"
    },
    "374": {
      "offset": [
        1191,
        1218
      ],
      "op": "EQ",
      "path": "10"
    },
    "375": {
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1BD"
    },
    "378": {
      "offset": [
        1183,
        1242
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "379": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "381": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "DUP1",
      "path": "10"
    },
    "382": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "383": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "387": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "389": {
      "op": "SHL"
    },
    "390": {
      "offset": [
        1183,
        1242
      ],
      "op": "DUP2",
      "path": "10"
    },
    "391": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "392": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "394": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "396": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "DUP3",
      "path": "10"
    },
    "397": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "ADD",
      "path": "10"
    },
    "398": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "399": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x13"
    },
    "401": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "403": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "DUP3",
      "path": "10"
    },
    "404": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "ADD",
      "path": "10"
    },
    "405": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "406": {
      "op": "PUSH19",
      "value": "0x26BAB9BA103AB9B2902624A725903A37B5B2B7"
    },
    "426": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "428": {
      "op": "SHL"
    },
    "429": {
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x44"
    },
    "431": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "DUP3",
      "path": "10"
    },
    "432": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "ADD",
      "path": "10"
    },
    "433": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "434": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "435": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "436": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "437": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "DUP2",
      "path": "10"
    },
    "438": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "439": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "SUB",
      "path": "10"
    },
    "440": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x64"
    },
    "442": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "ADD",
      "path": "10"
    },
    "443": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "444": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "REVERT",
      "path": "10"
    },
    "445": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1183,
        1242
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "446": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        586,
        601
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "448": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        603,
        615
      ],
      "op": "DUP1",
      "path": "10"
    },
    "449": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        630,
        635
      ],
      "op": "DUP3",
      "path": "10"
    },
    "450": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "DUP1",
      "path": "10"
    },
    "451": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "453": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "ADD",
      "path": "10"
    },
    "454": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "455": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "456": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "458": {
      "op": "DUP2"
    },
    "459": {
      "op": "LT"
    },
    "460": {
      "op": "ISZERO"
    },
    "461": {
      "op": "PUSH2",
      "value": "0x1D5"
    },
    "464": {
      "op": "JUMPI"
    },
    "465": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "467": {
      "op": "DUP1"
    },
    "468": {
      "op": "REVERT"
    },
    "469": {
      "op": "JUMPDEST"
    },
    "470": {
      "op": "POP"
    },
    "471": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "DUP1",
      "path": "10"
    },
    "472": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "473": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "475": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "476": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "477": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "ADD",
      "path": "10"
    },
    "478": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "479": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "481": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "MLOAD",
      "path": "10",
      "statement": 0
    },
    "482": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "483": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "484": {
      "op": "POP"
    },
    "485": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "486": {
      "op": "POP"
    },
    "487": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "DUP2",
      "path": "10"
    },
    "488": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "489": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "DUP4",
      "path": "10"
    },
    "490": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        619,
        656
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "491": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "493": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "495": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "497": {
      "op": "SHL"
    },
    "498": {
      "op": "SUB"
    },
    "499": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "DUP9",
      "path": "10"
    },
    "500": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "AND",
      "path": "10"
    },
    "501": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "502": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C"
    },
    "535": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "536": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "538": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "539": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        711
      ],
      "op": "LOG4",
      "path": "10"
    },
    "540": {
      "offset": [
        1252,
        1253
      ],
      "op": "POP",
      "path": "10"
    },
    "541": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1252,
        1253
      ],
      "op": "POP",
      "path": "10"
    },
    "542": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "POP",
      "path": "10"
    },
    "543": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "POP",
      "path": "10"
    },
    "544": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        465,
        718
      ],
      "op": "POP",
      "path": "10"
    },
    "545": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "jump": "o",
      "offset": [
        465,
        718
      ],
      "op": "JUMP",
      "path": "10"
    },
    "546": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        724,
        1147
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "547": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "549": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "DUP1",
      "path": "10"
    },
    "550": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "551": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "553": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "DUP2",
      "path": "10"
    },
    "554": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "ADD",
      "path": "10"
    },
    "555": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "DUP6",
      "path": "10"
    },
    "556": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "557": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "558": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x44"
    },
    "560": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "DUP1",
      "path": "10"
    },
    "561": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "DUP3",
      "path": "10"
    },
    "562": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "ADD",
      "path": "10"
    },
    "563": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "DUP6",
      "path": "10"
    },
    "564": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "565": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "566": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "DUP3",
      "path": "10"
    },
    "567": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "568": {
      "op": "DUP1"
    },
    "569": {
      "op": "DUP4"
    },
    "570": {
      "op": "SUB"
    },
    "571": {
      "op": "SWAP1"
    },
    "572": {
      "op": "SWAP2"
    },
    "573": {
      "op": "ADD"
    },
    "574": {
      "op": "DUP2"
    },
    "575": {
      "op": "MSTORE"
    },
    "576": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x64"
    },
    "578": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "579": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "580": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "ADD",
      "path": "10"
    },
    "581": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "582": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "583": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "584": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        915,
        993
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "586": {
      "op": "DUP2"
    },
    "587": {
      "op": "ADD"
    },
    "588": {
      "op": "DUP1"
    },
    "589": {
      "op": "MLOAD"
    },
    "590": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "592": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "594": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "596": {
      "op": "SHL"
    },
    "597": {
      "op": "SUB"
    },
    "598": {
      "op": "AND"
    },
    "599": {
      "op": "PUSH4",
      "value": "0x94985DDD"
    },
    "604": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "606": {
      "op": "SHL"
    },
    "607": {
      "op": "OR"
    },
    "608": {
      "op": "SWAP1"
    },
    "609": {
      "op": "MSTORE"
    },
    "610": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        868,
        885
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "612": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        868,
        885
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "613": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1015,
        1021
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x324B0"
    },
    "617": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1015,
        1021
      ],
      "op": "DUP1",
      "path": "10"
    },
    "618": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1039,
        1048
      ],
      "op": "GAS",
      "path": "10",
      "statement": 1
    },
    "619": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1039,
        1053
      ],
      "op": "LT",
      "path": "10"
    },
    "620": {
      "branch": 2,
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1039,
        1053
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "621": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BD"
    },
    "624": {
      "branch": 2,
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "625": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "627": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "DUP1",
      "path": "10"
    },
    "628": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "629": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "633": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "635": {
      "op": "SHL"
    },
    "636": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "DUP2",
      "path": "10"
    },
    "637": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "638": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "640": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "642": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "DUP3",
      "path": "10"
    },
    "643": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "ADD",
      "path": "10"
    },
    "644": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "645": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1B"
    },
    "647": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "649": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "DUP3",
      "path": "10"
    },
    "650": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "ADD",
      "path": "10"
    },
    "651": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "652": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000"
    },
    "685": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x44"
    },
    "687": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "DUP3",
      "path": "10"
    },
    "688": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "ADD",
      "path": "10"
    },
    "689": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "690": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "691": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "692": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "693": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "DUP2",
      "path": "10"
    },
    "694": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "695": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "SUB",
      "path": "10"
    },
    "696": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x64"
    },
    "698": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "ADD",
      "path": "10"
    },
    "699": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "700": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "REVERT",
      "path": "10"
    },
    "701": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1031,
        1085
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "702": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1096,
        1108
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "704": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1129
      ],
      "op": "DUP5",
      "path": "10"
    },
    "705": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "707": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "709": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "711": {
      "op": "SHL"
    },
    "712": {
      "op": "SUB"
    },
    "713": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1134
      ],
      "op": "AND",
      "path": "10"
    },
    "714": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1135,
        1139
      ],
      "op": "DUP4",
      "path": "10"
    },
    "715": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "717": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "718": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP1",
      "path": "10"
    },
    "719": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP3",
      "path": "10"
    },
    "720": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP1",
      "path": "10"
    },
    "721": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "722": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "723": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "725": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "ADD",
      "path": "10"
    },
    "726": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "727": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP1",
      "path": "10"
    },
    "728": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP4",
      "path": "10"
    },
    "729": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP4",
      "path": "10"
    },
    "730": {
      "op": "JUMPDEST"
    },
    "731": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "733": {
      "op": "DUP4"
    },
    "734": {
      "op": "LT"
    },
    "735": {
      "op": "PUSH2",
      "value": "0x2F9"
    },
    "738": {
      "op": "JUMPI"
    },
    "739": {
      "op": "DUP1"
    },
    "740": {
      "op": "MLOAD"
    },
    "741": {
      "op": "DUP3"
    },
    "742": {
      "op": "MSTORE"
    },
    "743": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "745": {
      "op": "NOT"
    },
    "746": {
      "op": "SWAP1"
    },
    "747": {
      "op": "SWAP3"
    },
    "748": {
      "op": "ADD"
    },
    "749": {
      "op": "SWAP2"
    },
    "750": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "752": {
      "op": "SWAP2"
    },
    "753": {
      "op": "DUP3"
    },
    "754": {
      "op": "ADD"
    },
    "755": {
      "op": "SWAP2"
    },
    "756": {
      "op": "ADD"
    },
    "757": {
      "op": "PUSH2",
      "value": "0x2DA"
    },
    "760": {
      "op": "JUMP"
    },
    "761": {
      "op": "JUMPDEST"
    },
    "762": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "764": {
      "op": "DUP4"
    },
    "765": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "767": {
      "op": "SUB"
    },
    "768": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "771": {
      "op": "EXP"
    },
    "772": {
      "op": "SUB"
    },
    "773": {
      "op": "DUP1"
    },
    "774": {
      "op": "NOT"
    },
    "775": {
      "op": "DUP3"
    },
    "776": {
      "op": "MLOAD"
    },
    "777": {
      "op": "AND"
    },
    "778": {
      "op": "DUP2"
    },
    "779": {
      "op": "DUP5"
    },
    "780": {
      "op": "MLOAD"
    },
    "781": {
      "op": "AND"
    },
    "782": {
      "op": "DUP1"
    },
    "783": {
      "op": "DUP3"
    },
    "784": {
      "op": "OR"
    },
    "785": {
      "op": "DUP6"
    },
    "786": {
      "op": "MSTORE"
    },
    "787": {
      "op": "POP"
    },
    "788": {
      "op": "POP"
    },
    "789": {
      "op": "POP"
    },
    "790": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "791": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "792": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "793": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "794": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "795": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "ADD",
      "path": "10"
    },
    "796": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "797": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "798": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "799": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "801": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "803": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "804": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP1",
      "path": "10"
    },
    "805": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP4",
      "path": "10"
    },
    "806": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "SUB",
      "path": "10"
    },
    "807": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP2",
      "path": "10"
    },
    "808": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "810": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "DUP7",
      "path": "10"
    },
    "811": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "GAS",
      "path": "10"
    },
    "812": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "CALL",
      "path": "10"
    },
    "813": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "814": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "815": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "POP",
      "path": "10"
    },
    "816": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1113,
        1140
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "817": {
      "op": "DUP1"
    },
    "818": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "820": {
      "op": "DUP2"
    },
    "821": {
      "op": "EQ"
    },
    "822": {
      "op": "PUSH2",
      "value": "0x35B"
    },
    "825": {
      "op": "JUMPI"
    },
    "826": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "828": {
      "op": "MLOAD"
    },
    "829": {
      "op": "SWAP2"
    },
    "830": {
      "op": "POP"
    },
    "831": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "833": {
      "op": "NOT"
    },
    "834": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "836": {
      "op": "RETURNDATASIZE"
    },
    "837": {
      "op": "ADD"
    },
    "838": {
      "op": "AND"
    },
    "839": {
      "op": "DUP3"
    },
    "840": {
      "op": "ADD"
    },
    "841": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "843": {
      "op": "MSTORE"
    },
    "844": {
      "op": "RETURNDATASIZE"
    },
    "845": {
      "op": "DUP3"
    },
    "846": {
      "op": "MSTORE"
    },
    "847": {
      "op": "RETURNDATASIZE"
    },
    "848": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "850": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "852": {
      "op": "DUP5"
    },
    "853": {
      "op": "ADD"
    },
    "854": {
      "op": "RETURNDATACOPY"
    },
    "855": {
      "op": "PUSH2",
      "value": "0x360"
    },
    "858": {
      "op": "JUMP"
    },
    "859": {
      "op": "JUMPDEST"
    },
    "860": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "862": {
      "op": "SWAP2"
    },
    "863": {
      "op": "POP"
    },
    "864": {
      "op": "JUMPDEST"
    },
    "865": {
      "op": "POP"
    },
    "866": {
      "op": "POP"
    },
    "867": {
      "op": "POP"
    },
    "868": {
      "op": "POP"
    },
    "869": {
      "op": "POP"
    },
    "870": {
      "op": "POP"
    },
    "871": {
      "op": "POP"
    },
    "872": {
      "op": "POP"
    },
    "873": {
      "op": "POP"
    },
    "874": {
      "op": "POP"
    },
    "875": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "jump": "o",
      "offset": [
        724,
        1147
      ],
      "op": "JUMP",
      "path": "10"
    }
  },
  "sha1": "dcf9067704856bf4cd3274030f7fbc4f0f074d02",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\nimport \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\";\nimport \"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\";\n\ncontract VRFCoordinatorMock {\n\n    LinkTokenInterface public LINK;\n\n    event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\n\n    constructor(address linkAddress) public {\n        LINK = LinkTokenInterface(linkAddress);\n    }\n\n    function onTokenTransfer(address sender, uint256 fee, bytes memory _data)\n        public\n        onlyLINK\n    {\n        (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\n        emit RandomnessRequest(sender, keyHash, seed);\n    }\n\n    function callBackWithRandomness(\n        bytes32 requestId,\n        uint256 randomness,\n        address consumerContract\n    ) public {\n        VRFConsumerBase v;\n        bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\n        uint256 b = 206000;\n        require(gasleft() >= b, \"not enough gas for consumer\");\n        (bool success,) = consumerContract.call(resp);\n    }\n\n    modifier onlyLINK() {\n        require(msg.sender == address(LINK), \"Must use LINK token\");\n        _;\n    }\n}\n",
  "sourceMap": "191:1071:10:-:0;;;364:95;5:9:-1;2:2;;;27:1;24;17:12;2:2;364:95:10;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;364:95:10;414:4;:38;;-1:-1:-1;;;;;414:38:10;;;-1:-1:-1;;;;;;414:38:10;;;;;;;;;191:1071;;;;;;",
  "sourcePath": "contracts/test/VRFCoordinatorMock.sol",
  "type": "contract"
}